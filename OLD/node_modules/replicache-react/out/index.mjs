import { useEffect, useState } from 'react';
import { unstable_batchedUpdates } from 'react-dom';
// We wrap all the callbacks in a `unstable_batchedUpdates` call to ensure that
// we do not render things more than once over all of the changed subscriptions.
let hasPendingCallback = false;
let callbacks = [];
function doCallback() {
    const cbs = callbacks;
    callbacks = [];
    hasPendingCallback = false;
    unstable_batchedUpdates(() => {
        for (const callback of cbs) {
            callback();
        }
    });
}
export function useSubscribe(rep, query, def, deps = []) {
    const [snapshot, setSnapshot] = useState(def);
    useEffect(() => {
        if (!rep) {
            return;
        }
        return rep.subscribe(query, {
            onData: (data) => {
                callbacks.push(() => setSnapshot(data));
                if (!hasPendingCallback) {
                    void Promise.resolve().then(doCallback);
                    hasPendingCallback = true;
                }
            },
        });
    }, [rep, ...deps]);
    return snapshot;
}
